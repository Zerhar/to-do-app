{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js","components/TodoList.module.css","App.module.css"],"names":["TodoItems","deleteKey","key","_this","props","delete","addTask","item","react_default","a","createElement","onClick","text","listItems","this","entries","map","className","classes","theList","react_flip_move_es","enterAnimation","leaveAnimation","Component","TodoList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addList","e","listArray","state","list","_inputElement","value","unshift","Date","now","setState","preventDefault","deleteList","filteredItems","filter","_this2","todoListMain","header","onSubmit","ref","placeholder","type","TodoItem_TodoItems","App","container","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"gQAIqBA,6MAEjBC,UAAY,SAACC,GACTC,EAAKC,MAAMC,OAAOH,MAGtBI,QAAU,SAACC,GACP,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,QAAS,kBAAMR,EAAKF,UAAUM,EAAKL,MAAMA,IAAKK,EAAKL,KAAMK,EAAKK,+EAIzE,IACIC,EADcC,KAAKV,MAAMW,QACDC,IAAIF,KAAKR,SACrC,OACIE,EAAAC,EAAAC,cAAA,MAAIO,UAAWC,IAAQC,SACnBX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAUC,eAAe,OAAOC,eAAe,QAC1CT,WAhBkBU,aCAlBC,cACjB,SAAAA,EAAYpB,GAAO,IAAAD,EAAA,OAAAsB,OAAAC,EAAA,EAAAD,CAAAX,KAAAU,IACfrB,EAAAsB,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAf,KAAMV,KAMV0B,QAAU,SAACC,GACP,IAAIC,EAAY7B,EAAK8B,MAAMC,KACM,KAA7B/B,EAAKgC,cAAcC,QACnBJ,EAAUK,QAAQ,CACdzB,KAAMT,EAAKgC,cAAcC,MACzBlC,IAAKoC,KAAKC,QAEdpC,EAAKqC,SAAS,CACVN,KAAMF,IAEV7B,EAAKgC,cAAcC,MAAQ,GAC3BL,EAAEU,mBAlBStC,EAuBnBuC,WAAa,SAACxC,GACV,IAAIyC,EAAgBxC,EAAK8B,MAAMC,KAAKU,OAAO,SAACrC,GAAD,OAAUA,EAAKL,MAAQA,IAClEC,EAAKqC,SAAS,CACVN,KAAMS,KAxBVxC,EAAK8B,MAAQ,CACTC,KAAM,IAHK/B,wEA8BV,IAAA0C,EAAA/B,KACL,OACIN,EAAAC,EAAAC,cAAA,OAAKO,UAAWC,IAAQ4B,cACpBtC,EAAAC,EAAAC,cAAA,OAAKO,UAAWC,IAAQ6B,QACpBvC,EAAAC,EAAAC,cAAA,QAAMsC,SAAUlC,KAAKgB,SACjBtB,EAAAC,EAAAC,cAAA,SACIuC,IAAK,SAACxC,GAAD,OAAOoC,EAAKV,cAAgB1B,GACjCyC,YAAY,eAChB1C,EAAAC,EAAAC,cAAA,UAAQyC,KAAK,UAAb,SAGR3C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0C,EAAD,CACIrC,QAASD,KAAKmB,MAAMC,KACpB7B,OAAQS,KAAK4B,sBA7CCnB,6BCAjB8B,mLAEjB,OACE7C,EAAAC,EAAAC,cAAA,OAAKO,UAAWC,IAAQmC,KACtB7C,EAAAC,EAAAC,cAAA,OAAKO,UAAWC,IAAQoC,WACtB9C,EAAAC,EAAAC,cAAC6C,EAAD,eALuBhC,aCQbiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCElInBC,EAAAC,QAAA,CAAkB3B,aAAA,+BAAAC,OAAA,yBAAA5B,QAAA,8CCAlBqD,EAAAC,QAAA,CAAkBpB,IAAA,iBAAAC,UAAA","file":"static/js/main.cbd8c380.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport FlipMove from 'react-flip-move';\r\nimport classes from './TodoList.module.css';\r\n\r\nexport default class TodoItems extends Component {\r\n\r\n    deleteKey = (key) => {\r\n        this.props.delete(key);\r\n    }\r\n\r\n    addTask = (item) => {\r\n        return <li onClick={() => this.deleteKey(item.key)} key={item.key}>{item.text}</li>\r\n    }\r\n\r\n    render() {\r\n        let todoEntries = this.props.entries;\r\n        let listItems = todoEntries.map(this.addTask);\r\n        return (\r\n            <ul className={classes.theList}>\r\n                <FlipMove enterAnimation=\"fade\" leaveAnimation=\"fade\">\r\n                    {listItems}\r\n                </FlipMove>\r\n            </ul>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport classes from './TodoList.module.css';\r\n\r\nexport default class TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            list: []\r\n        };\r\n    }\r\n\r\n    addList = (e) => {\r\n        let listArray = this.state.list;\r\n        if (this._inputElement.value !== '') {\r\n            listArray.unshift({\r\n                text: this._inputElement.value,\r\n                key: Date.now()\r\n            });\r\n            this.setState({\r\n                list: listArray\r\n            });\r\n            this._inputElement.value = '';\r\n            e.preventDefault()\r\n        }\r\n\r\n    }\r\n\r\n    deleteList = (key) => {\r\n        let filteredItems = this.state.list.filter((item) => item.key !== key);\r\n        this.setState({\r\n            list: filteredItems\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.todoListMain}>\r\n                <div className={classes.header}>\r\n                    <form onSubmit={this.addList}>\r\n                        <input\r\n                            ref={(a) => this._inputElement = a}\r\n                            placeholder=\"enter task\" />\r\n                        <button type=\"submit\">Add</button>\r\n                    </form>\r\n                </div>\r\n                <div>\r\n                    <TodoItem\r\n                        entries={this.state.list}\r\n                        delete={this.deleteList} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport TodoList from './components/TodoList';\r\nimport classes from './App.module.css';\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <div className={classes.App}>\r\n        <div className={classes.container}>\r\n          <TodoList />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListMain\":\"TodoList_todoListMain__2ox6s\",\"header\":\"TodoList_header__3QdB2\",\"theList\":\"TodoList_theList__3Kanp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3OJ-2\",\"container\":\"App_container__1JTHT\"};"],"sourceRoot":""}